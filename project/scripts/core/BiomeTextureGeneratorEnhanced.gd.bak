# BiomeTextureGeneratorEnhanced.gd
# Generador mejorado de texturas con patrón MOSAICO

extends Node

class_name BiomeTextureGeneratorEnhanced

enum BiomeType {
	SAND = 0,
	FOREST = 1,
	ICE = 2,
	FIRE = 3,
	ABYSS = 4
}

# Mapa de colores por bioma (mosaico)
const BIOME_COLORS = {
	0: {  # SAND
		"primary": Color(0.956, 0.816, 0.247, 1.0),
		"light": Color(0.976, 0.910, 0.624, 1.0),
		"accent": Color(0.839, 0.533, 0.063, 1.0),
		"highlight": Color(0.998, 0.998, 0.961, 1.0)
	},
	1: {  # FOREST
		"primary": Color(0.157, 0.682, 0.376, 1.0),
		"light": Color(0.322, 0.741, 0.502, 1.0),
		"accent": Color(0.118, 0.518, 0.286, 1.0),
		"highlight": Color(0.945, 0.973, 0.914, 1.0)
	},
	2: {  # ICE
		"primary": Color(0.365, 0.682, 0.882, 1.0),
		"light": Color(0.682, 0.839, 0.945, 1.0),
		"accent": Color(0.157, 0.455, 0.651, 1.0),
		"highlight": Color(0.839, 0.918, 0.973, 1.0)
	},
	3: {  # FIRE
		"primary": Color(0.906, 0.302, 0.235, 1.0),
		"light": Color(0.980, 0.859, 0.847, 1.0),
		"accent": Color(0.659, 0.196, 0.149, 1.0),
		"highlight": Color(0.993, 0.918, 0.816, 1.0)
	},
	4: {  # ABYSS
		"primary": Color(0.102, 0.0, 0.2, 1.0),
		"light": Color(0.290, 0.141, 0.353, 1.0),
		"accent": Color(0.424, 0.208, 0.514, 1.0),
		"highlight": Color(0.843, 0.741, 0.886, 1.0)
	}
}

var noise_seed: int = 12345
var noise_scale: float = 0.01
var detail_noise_scale: float = 0.05
var biome_transition_smoothness: float = 0.3

func _ready() -> void:
	print("[BiomeTextureGeneratorEnhanced] Inicializado con texturas Mosaico")

func get_biome_at_position(world_pos: Vector2) -> int:
	"""Obtener tipo de bioma basado en coordenadas del mundo"""
	var noise = FastNoiseLite.new()
	noise.seed = 12345
	noise.noise_type = FastNoiseLite.TYPE_PERLIN
	noise.frequency = 0.0002
	
	var noise_value = noise.get_noise_2d(world_pos.x, world_pos.y)
	
	if noise_value < -0.6:
		return BiomeType.ABYSS
	elif noise_value < -0.2:
		return BiomeType.ICE
	elif noise_value < 0.2:
		return BiomeType.SAND
	elif noise_value < 0.6:
		return BiomeType.FOREST
	else:
		return BiomeType.FIRE

func get_biome_color(biome_type: int) -> Color:
	if BIOME_COLORS.has(biome_type):
		return BIOME_COLORS[biome_type]["primary"]
	return BIOME_COLORS[0]["primary"]

func get_biome_name(biome_type: int) -> String:
	match biome_type:
		BiomeType.SAND: return "Arena"
		BiomeType.FOREST: return "Bosque"
		BiomeType.ICE: return "Hielo"
		BiomeType.FIRE: return "Fuego"
		BiomeType.ABYSS: return "Abismo"
		_: return "Desconocido"

func generate_chunk_texture_enhanced(chunk_pos: Vector2i, chunk_size: int = 512) -> ImageTexture:
	"""Generar textura MEJORADA con patrón MOSAICO"""
	var image = Image.create(chunk_size, chunk_size, false, Image.FORMAT_RGBA8)
	
	var chunk_world_pos = Vector2(chunk_pos) * chunk_size
	var center_pos = chunk_world_pos + Vector2(chunk_size / 2.0, chunk_size / 2.0)
	
	# Obtener bioma del centro del chunk
	var biome_type = get_biome_at_position(center_pos)
	var colors = BIOME_COLORS.get(biome_type, BIOME_COLORS[0])
	var base_color = colors["primary"]
	
	# Llenar fondo
	image.fill(base_color)
	
	# Generar patrón mosaico
	var tile_size = 20
	var noise = FastNoiseLite.new()
	noise.seed = hash(chunk_pos) & 0xFFFF
	noise.frequency = 0.1
	
	for y in range(0, chunk_size, tile_size):
		for x in range(0, chunk_size, tile_size):
			# Determinar variante de tile
			var noise_val = noise.get_noise_2d(float(x) / 20.0, float(y) / 20.0)
			var tile_variant = int((noise_val + 1.0) * 2.0) % 3
			
			var tile_color = colors["light"] if tile_variant == 0 else colors["primary"]
			if tile_variant == 2:
				tile_color = colors["accent"]
			
			# Dibujar tile con bordes
			_draw_mosaic_tile(image, x, y, tile_size, chunk_size, tile_color, colors["highlight"])
	
	var texture = ImageTexture.create_from_image(image)
	var biome_name = get_biome_name(biome_type)
	print("[BiomeTextureGeneratorEnhanced] Chunk - %s - GENERADO" % [biome_name])
	return texture

func _draw_mosaic_tile(image: Image, x: int, y: int, size: int, max_size: int, color: Color, accent: Color) -> void:
	"""Dibuja un tile de mosaico con bordes"""
	# Llenar tile
	for py in range(y, min(y + size, max_size)):
		for px in range(x, min(x + size, max_size)):
			image.set_pixel(px, py, color)
	
	# Bordes oscuros
	for i in range(size):
		if x + i < max_size and y + i < max_size:
			var darken = Color(color.r * 0.7, color.g * 0.7, color.b * 0.7, 1.0)
			image.set_pixel(x, y + i, darken)
			image.set_pixel(x + i, y, darken)
	
	# Highlight
	if x + 2 < max_size and y + 2 < max_size:
		image.set_pixel(x + 2, y + 2, accent)
		image.set_pixel(x + 3, y + 2, accent)
		image.set_pixel(x + 2, y + 3, accent)

func generate_chunk_texture(chunk_pos: Vector2i, chunk_size: int = 512) -> ImageTexture:
	"""Wrapper que genera texturas mejoradas"""
	return generate_chunk_texture_enhanced(chunk_pos, chunk_size)
